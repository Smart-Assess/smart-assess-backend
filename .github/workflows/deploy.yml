name: Deploy to EC2

on:
  push:
    branches: [ beta ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: smartassess
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Check EC2 connectivity
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        echo "$PRIVATE_KEY" > private_key 
        chmod 400 private_key
        # Test SSH connection first
        if ! timeout 10 ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i private_key ${USER}@${HOST} 'echo "SSH connection successful"'; then
          echo "Failed to connect to EC2 instance. Check security group and network settings."
          exit 1
        fi

    - name: Deploy to EC2
      if: success()
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        # Stop and remove existing container if it exists
        ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} '
          if docker ps -a | grep -q fastapi-app; then
            sudo docker stop fastapi-app || true
            sudo docker rm fastapi-app || true
          fi
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          sudo docker pull ${{ steps.login-ecr.outputs.registry }}/smartassess:latest
          sudo docker run -d --name fastapi-app -p 8000:8000 --restart unless-stopped ${{ steps.login-ecr.outputs.registry }}/smartassess:latest
        '